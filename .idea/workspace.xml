<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="ec853efc-8b38-4438-b5c3-a23685db0f85" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/explore.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/explore.clj" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DepsProjectDetails">
    <option name="cachedModuleDetails">
      <map>
        <entry key="$PROJECT_DIR$/deps.edn">
          <value>
            <ModuleDetails>
              <option name="details" value="{:paths [&quot;src&quot; &quot;classes&quot; &quot;spec&quot;], :deps {org.clojure/clojure {:mvn/version &quot;1.10.1&quot;}, ring/ring {:mvn/version &quot;1.8.0&quot;}, hiccup/hiccup {:mvn/version &quot;1.0.5&quot;}, clj-http/clj-http {:mvn/version &quot;3.10.0&quot;}, org.clojure/core.async {:mvn/version &quot;1.1.587&quot;}, org.clojure/data.json {:mvn/version &quot;1.0.0&quot;}, enlive/enlive {:mvn/version &quot;1.1.6&quot;}}, :aliases {:deps {:extra-deps {org.clojure/tools.deps.alpha {:mvn/version &quot;0.8.599&quot;}}}, :test {:extra-deps {speclj/speclj {:git/url &quot;https://github.com/kyptin/speclj&quot;, :sha &quot;a843b64cc5a015b8484627eff6e84bbac2712692&quot;}}, :main-opts [&quot;-m&quot; &quot;speclj.cli&quot;]}}, :mvn/repos {&quot;central&quot; {:url &quot;https://repo1.maven.org/maven2/&quot;}, &quot;clojars&quot; {:url &quot;https://repo.clojars.org/&quot;}}, :system-aliases #{:test :deps}, :deps-tree {org.clojure/data.json {:mvn/version &quot;1.0.0&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\clojure\\data.json\\1.0.0\\data.json-1.0.0.jar&quot;], :children ()}, org.clojure/clojure {:mvn/version &quot;1.10.1&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\clojure\\clojure\\1.10.1\\clojure-1.10.1.jar&quot;], :children (org.clojure/core.specs.alpha org.clojure/spec.alpha)}, commons-codec/commons-codec {:mvn/version &quot;1.12&quot;, :exclusions #{org.clojure/clojure}, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\commons-codec\\commons-codec\\1.12\\commons-codec-1.12.jar&quot;], :dependents [clj-http/clj-http], :children ()}, org.ccil.cowan.tagsoup/tagsoup {:mvn/version &quot;1.2.1&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\ccil\\cowan\\tagsoup\\tagsoup\\1.2.1\\tagsoup-1.2.1.jar&quot;], :dependents [enlive/enlive], :children ()}, org.clojure/tools.analyzer {:mvn/version &quot;1.0.0&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\clojure\\tools.analyzer\\1.0.0\\tools.analyzer-1.0.0.jar&quot;], :dependents [org.clojure/tools.analyzer.jvm], :children ()}, ring/ring-devel {:mvn/version &quot;1.8.0&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\ring\\ring-devel\\1.8.0\\ring-devel-1.8.0.jar&quot;], :dependents [ring/ring], :children (ns-tracker/ns-tracker clj-stacktrace/clj-stacktrace)}, org.clojure/core.specs.alpha {:mvn/version &quot;0.2.44&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\clojure\\core.specs.alpha\\0.2.44\\core.specs.alpha-0.2.44.jar&quot;], :dependents [org.clojure/clojure], :children ()}, org.clojure/spec.alpha {:mvn/version &quot;0.2.176&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\clojure\\spec.alpha\\0.2.176\\spec.alpha-0.2.176.jar&quot;], :dependents [org.clojure/clojure], :children ()}, commons-fileupload/commons-fileupload {:mvn/version &quot;1.4&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\commons-fileupload\\commons-fileupload\\1.4\\commons-fileupload-1.4.jar&quot;], :dependents [ring/ring-core], :children ()}, org.eclipse.jetty/jetty-http {:mvn/version &quot;9.4.22.v20191022&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\eclipse\\jetty\\jetty-http\\9.4.22.v20191022\\jetty-http-9.4.22.v20191022.jar&quot;], :dependents [org.eclipse.jetty/jetty-server], :children (org.eclipse.jetty/jetty-util)}, org.eclipse.jetty/jetty-util {:mvn/version &quot;9.4.22.v20191022&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\eclipse\\jetty\\jetty-util\\9.4.22.v20191022\\jetty-util-9.4.22.v20191022.jar&quot;], :dependents [org.eclipse.jetty/jetty-http], :children ()}, org.apache.httpcomponents/httpasyncclient {:mvn/version &quot;4.1.4&quot;, :exclusions #{org.clojure/clojure}, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\apache\\httpcomponents\\httpasyncclient\\4.1.4\\httpasyncclient-4.1.4.jar&quot;], :dependents [clj-http/clj-http], :children (org.apache.httpcomponents/httpcore-nio)}, org.clojure/tools.analyzer.jvm {:mvn/version &quot;1.0.0&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\clojure\\tools.analyzer.jvm\\1.0.0\\tools.analyzer.jvm-1.0.0.jar&quot;], :dependents [org.clojure/core.async], :children (org.clojure/tools.analyzer org.ow2.asm/asm org.clojure/tools.reader org.clojure/core.memoize)}, mmargs/mmargs {:mvn/version &quot;1.2.0&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\mmargs\\mmargs\\1.2.0\\mmargs-1.2.0.jar&quot;], :dependents [speclj/speclj], :children ()}, slingshot/slingshot {:mvn/version &quot;0.12.2&quot;, :exclusions #{org.clojure/clojure}, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\slingshot\\slingshot\\0.12.2\\slingshot-0.12.2.jar&quot;], :dependents [clj-http/clj-http], :children ()}, org.apache.httpcomponents/httpcore-nio {:mvn/version &quot;4.4.10&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\apache\\httpcomponents\\httpcore-nio\\4.4.10\\httpcore-nio-4.4.10.jar&quot;], :dependents [org.apache.httpcomponents/httpasyncclient], :children ()}, ring/ring-jetty-adapter {:mvn/version &quot;1.8.0&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\ring\\ring-jetty-adapter\\1.8.0\\ring-jetty-adapter-1.8.0.jar&quot;], :dependents [ring/ring], :children (org.eclipse.jetty/jetty-server)}, commons-io/commons-io {:mvn/version &quot;2.6&quot;, :exclusions #{org.clojure/clojure}, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\commons-io\\commons-io\\2.6\\commons-io-2.6.jar&quot;], :dependents [clj-http/clj-http], :children ()}, org.clojure/tools.namespace {:mvn/version &quot;0.2.11&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\clojure\\tools.namespace\\0.2.11\\tools.namespace-0.2.11.jar&quot;], :dependents [ns-tracker/ns-tracker], :children ()}, speclj/speclj {:git/url &quot;https://github.com/kyptin/speclj&quot;, :sha &quot;a843b64cc5a015b8484627eff6e84bbac2712692&quot;, :deps/manifest :deps, :deps/root &quot;C:\\Users\\Jake612\\.gitlibs\\libs\\speclj\\speclj\\a843b64cc5a015b8484627eff6e84bbac2712692&quot;, :paths [&quot;C:\\Users\\Jake612\\.gitlibs\\libs\\speclj\\speclj\\a843b64cc5a015b8484627eff6e84bbac2712692\\src&quot;], :children (mmargs/mmargs trptcolin/versioneer fresh/fresh)}, clj-http/clj-http {:mvn/version &quot;3.10.0&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\clj-http\\clj-http\\3.10.0\\clj-http-3.10.0.jar&quot;], :children (commons-codec/commons-codec org.apache.httpcomponents/httpasyncclient slingshot/slingshot commons-io/commons-io org.apache.httpcomponents/httpcore org.apache.httpcomponents/httpclient-cache org.apache.httpcomponents/httpclient potemkin/potemkin org.apache.httpcomponents/httpmime)}, org.ow2.asm/asm {:mvn/version &quot;5.2&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\ow2\\asm\\asm\\5.2\\asm-5.2.jar&quot;], :dependents [org.clojure/tools.analyzer.jvm], :children ()}, trptcolin/versioneer {:mvn/version &quot;0.1.1&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\trptcolin\\versioneer\\0.1.1\\versioneer-0.1.1.jar&quot;], :dependents [speclj/speclj], :children ()}, org.apache.httpcomponents/httpcore {:mvn/version &quot;4.4.11&quot;, :exclusions #{org.clojure/clojure}, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\apache\\httpcomponents\\httpcore\\4.4.11\\httpcore-4.4.11.jar&quot;], :dependents [clj-http/clj-http], :children ()}, org.apache.httpcomponents/httpclient-cache {:mvn/version &quot;4.5.8&quot;, :exclusions #{org.clojure/clojure}, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\apache\\httpcomponents\\httpclient-cache\\4.5.8\\httpclient-cache-4.5.8.jar&quot;], :dependents [clj-http/clj-http], :children ()}, enlive/enlive {:mvn/version &quot;1.1.6&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\enlive\\enlive\\1.1.6\\enlive-1.1.6.jar&quot;], :children (org.ccil.cowan.tagsoup/tagsoup org.jsoup/jsoup)}, clj-tuple/clj-tuple {:mvn/version &quot;0.2.2&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\clj-tuple\\clj-tuple\\0.2.2\\clj-tuple-0.2.2.jar&quot;], :dependents [potemkin/potemkin], :children ()}, hiccup/hiccup {:mvn/version &quot;1.0.5&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\hiccup\\hiccup\\1.0.5\\hiccup-1.0.5.jar&quot;], :children ()}, riddley/riddley {:mvn/version &quot;0.1.12&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\riddley\\riddley\\0.1.12\\riddley-0.1.12.jar&quot;], :dependents [potemkin/potemkin], :children ()}, org.clojure/java.classpath {:mvn/version &quot;0.3.0&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\clojure\\java.classpath\\0.3.0\\java.classpath-0.3.0.jar&quot;], :dependents [ns-tracker/ns-tracker], :children ()}, ns-tracker/ns-tracker {:mvn/version &quot;0.4.0&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\ns-tracker\\ns-tracker\\0.4.0\\ns-tracker-0.4.0.jar&quot;], :dependents [ring/ring-devel], :children (org.clojure/tools.namespace org.clojure/java.classpath)}, commons-logging/commons-logging {:mvn/version &quot;1.2&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\commons-logging\\commons-logging\\1.2\\commons-logging-1.2.jar&quot;], :dependents [org.apache.httpcomponents/httpclient], :children ()}, fresh/fresh {:mvn/version &quot;1.1.2&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\fresh\\fresh\\1.1.2\\fresh-1.1.2.jar&quot;], :dependents [speclj/speclj], :children ()}, crypto-random/crypto-random {:mvn/version &quot;1.2.0&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\crypto-random\\crypto-random\\1.2.0\\crypto-random-1.2.0.jar&quot;], :dependents [ring/ring-core], :children ()}, ring/ring-codec {:mvn/version &quot;1.1.2&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\ring\\ring-codec\\1.1.2\\ring-codec-1.1.2.jar&quot;], :dependents [ring/ring-core], :children ()}, org.apache.httpcomponents/httpclient {:mvn/version &quot;4.5.8&quot;, :exclusions #{org.clojure/clojure}, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\apache\\httpcomponents\\httpclient\\4.5.8\\httpclient-4.5.8.jar&quot;], :dependents [clj-http/clj-http], :children (commons-logging/commons-logging)}, crypto-equality/crypto-equality {:mvn/version &quot;1.0.0&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\crypto-equality\\crypto-equality\\1.0.0\\crypto-equality-1.0.0.jar&quot;], :dependents [ring/ring-core], :children ()}, org.eclipse.jetty/jetty-io {:mvn/version &quot;9.4.22.v20191022&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\eclipse\\jetty\\jetty-io\\9.4.22.v20191022\\jetty-io-9.4.22.v20191022.jar&quot;], :dependents [org.eclipse.jetty/jetty-server], :children ()}, org.clojure/tools.reader {:mvn/version &quot;1.3.2&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\clojure\\tools.reader\\1.3.2\\tools.reader-1.3.2.jar&quot;], :dependents [org.clojure/tools.analyzer.jvm], :children ()}, org.jsoup/jsoup {:mvn/version &quot;1.7.2&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\jsoup\\jsoup\\1.7.2\\jsoup-1.7.2.jar&quot;], :dependents [enlive/enlive], :children ()}, javax.servlet/javax.servlet-api {:mvn/version &quot;3.1.0&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\javax\\servlet\\javax.servlet-api\\3.1.0\\javax.servlet-api-3.1.0.jar&quot;], :dependents [org.eclipse.jetty/jetty-server], :children ()}, potemkin/potemkin {:mvn/version &quot;0.4.5&quot;, :exclusions #{org.clojure/clojure}, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\potemkin\\potemkin\\0.4.5\\potemkin-0.4.5.jar&quot;], :dependents [clj-http/clj-http], :children (clj-tuple/clj-tuple riddley/riddley)}, clj-stacktrace/clj-stacktrace {:mvn/version &quot;0.2.8&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\clj-stacktrace\\clj-stacktrace\\0.2.8\\clj-stacktrace-0.2.8.jar&quot;], :dependents [ring/ring-devel], :children ()}, ring/ring-servlet {:mvn/version &quot;1.8.0&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\ring\\ring-servlet\\1.8.0\\ring-servlet-1.8.0.jar&quot;], :dependents [ring/ring], :children ()}, org.clojure/core.memoize {:mvn/version &quot;0.8.2&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\clojure\\core.memoize\\0.8.2\\core.memoize-0.8.2.jar&quot;], :dependents [org.clojure/tools.analyzer.jvm], :children (org.clojure/core.cache)}, ring/ring {:mvn/version &quot;1.8.0&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\ring\\ring\\1.8.0\\ring-1.8.0.jar&quot;], :children (ring/ring-devel ring/ring-jetty-adapter ring/ring-servlet ring/ring-core)}, org.clojure/data.priority-map {:mvn/version &quot;0.0.7&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\clojure\\data.priority-map\\0.0.7\\data.priority-map-0.0.7.jar&quot;], :dependents [org.clojure/core.cache], :children ()}, org.eclipse.jetty/jetty-server {:mvn/version &quot;9.4.22.v20191022&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\eclipse\\jetty\\jetty-server\\9.4.22.v20191022\\jetty-server-9.4.22.v20191022.jar&quot;], :dependents [ring/ring-jetty-adapter], :children (org.eclipse.jetty/jetty-http org.eclipse.jetty/jetty-io javax.servlet/javax.servlet-api)}, org.apache.httpcomponents/httpmime {:mvn/version &quot;4.5.8&quot;, :exclusions #{org.clojure/clojure}, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\apache\\httpcomponents\\httpmime\\4.5.8\\httpmime-4.5.8.jar&quot;], :dependents [clj-http/clj-http], :children ()}, ring/ring-core {:mvn/version &quot;1.8.0&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\ring\\ring-core\\1.8.0\\ring-core-1.8.0.jar&quot;], :dependents [ring/ring], :children (commons-fileupload/commons-fileupload crypto-random/crypto-random ring/ring-codec crypto-equality/crypto-equality)}, org.clojure/core.cache {:mvn/version &quot;0.8.2&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\clojure\\core.cache\\0.8.2\\core.cache-0.8.2.jar&quot;], :dependents [org.clojure/core.memoize], :children (org.clojure/data.priority-map)}, org.clojure/core.async {:mvn/version &quot;1.1.587&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\Jake612\\.m2\\repository\\org\\clojure\\core.async\\1.1.587\\core.async-1.1.587.jar&quot;], :children (org.clojure/tools.analyzer.jvm)}}}" />
              <option name="hash" value="0850a23492676ee9b7e5b5ba60fec81c" />
            </ModuleDetails>
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="ProjectId" id="1YbBJZ09x38JWL5XeACbYAWLBiC" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showExcludedFiles" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="cursive.last.file.extension.C\:/Users/Jake612/IdeaProjects/Comp590-Assignment3/src" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
  </component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\Users\Jake612\IdeaProjects\Comp590-Assignment3\test-dir\parse-dir" />
    </key>
  </component>
  <component name="ReplState" timestamp="1587313487287">{:repl-history {:ide [], :local [{:command &quot;(str (re-seq #\&quot;\\\\\&quot; \&quot;\\\\\&quot;) (re-seq #\&quot;\\\\\&quot; \&quot;\\\\\&quot;))&quot;, :offset 22, :ns &quot;user&quot;} {:command &quot;(#(+ (count (re-seq #\&quot;\\\\\&quot; (.getPath %))) (count (re-seq #\&quot;/\&quot; (.getPath %)))) \&quot;//\\\\\&quot;) &quot;, :offset 82, :ns &quot;user&quot;} {:command &quot;(#(+ (count (re-seq #\&quot;\\\\\&quot; %)) (count (re-seq #\&quot;/\&quot; %))) \&quot;//\\\\\&quot;) &quot;, :offset 27, :ns &quot;user&quot;} {:command &quot;(.exists (io/file \&quot;test-dir\\\\.idiot/objects\&quot;))&quot;, :offset 43, :ns &quot;user&quot;} {:command &quot;(io/make-parents \&quot;tmp\\\\dir/objects/sample.txt\&quot;)&quot;, :offset 45, :ns &quot;user&quot;} {:command &quot;(ns file-io\n  (:require [clojure.java.io :as io]\n            [clojure.string :as str])\n  (:import (java.util.zip InflaterInputStream)\n           (java.io ByteArrayOutputStream)))&quot;, :offset 178, :ns &quot;user&quot;} {:command &quot;(defn split-at-byte [b bytes]\n  (let [part1 (take-while (partial not= b) bytes)\n        part2 (nthrest bytes (-&gt; part1 count inc))]\n    [part1 part2]))&quot;, :offset 151, :ns &quot;file-io&quot;} {:command &quot;(split-at-byte 0x00 [0x1 0x00 0x2])&quot;, :offset 33, :ns &quot;file-io&quot;} {:command &quot;(slurp (file/io \&quot;test-dir/dir/file\&quot;))&quot;, :offset 34, :ns &quot;file-io&quot;} {:command &quot;(slurp (io/file \&quot;test-dir/dir/file\&quot;))&quot;, :offset 14, :ns &quot;file-io&quot;} {:command &quot;(ns commit\n  (:require [clojure.java.io :as io]\n            [commit-tree :as ct]\n            [rev-parse :as rp]\n            [branch :as bh]))\n\n(defn handle-commit\n  [commit-address dir db]\n  (let [head-branch (bh/get-master-name dir db)\n        ref-address (str dir db \&quot;/refs/heads/\&quot; head-branch)\n        spit-to-ref #(spit ref-address (str % \&quot;\\n\&quot;))]\n    (when (not (nil? commit-address))\n      (println \&quot;Commit created\&quot;)\n      (if (rp/is-ref? (str dir db \&quot;/HEAD\&quot;))\n        (if (.exists (io/as-file ref-address))\n          (do (io/delete-file ref-address)\n              (spit-to-ref commit-address)\n              (println (str \&quot;Updated branch \&quot; head-branch \&quot;.\&quot;)))\n          (spit-to-ref commit-address))\n        (spit (str dir db \&quot;/HEAD\&quot;) (str commit-address \&quot;\\n\&quot;))))))\n\n\n(defn commit\n  \&quot;function for handling commit\&quot;\n  [args dir db]\n  (let [[tree-addr m-switch message &amp; parent-commits] args]\n    (cond\n      (not (.isDirectory (io/file dir db))) (println \&quot;Error: could not find database. (Did you run `idiot init`?)\&quot;)\n      (nil? tree-addr) (println \&quot;Error: you must specify a tree address.\&quot;)\n      (not (.exists (io/as-file (ct/file-path tree-addr dir db)))) (println \&quot;Error: no tree object exists at that address.\&quot;)\n      (not= (ct/get-object-type tree-addr dir db) \&quot;tree\&quot;) (println \&quot;Error: an object exists at that address, but it isn't a tree.\&quot;)\n      (not= m-switch \&quot;-m\&quot;) (println \&quot;Error: you must specify a message.\&quot;)\n      (nil? message) (println \&quot;Error: you must specify a message with the -m switch.\&quot;)\n      :else (handle-commit (ct/parent-commit-handler message tree-addr parent-commits dir db) dir db))))\n&quot;, :offset 1618, :ns &quot;user&quot;} {:command &quot;(commit [\&quot;f95a59dd3a4cd71c504ee332114\\n568b8c5942be8\&quot; \&quot;-m\&quot; \&quot;Initial commit\&quot;] \&quot;test-dir\&quot; \&quot;.idiot\&quot;)&quot;, :offset 95, :ns &quot;commit&quot;} {:command &quot;(commit [\&quot;f95a59dd3a4cd71c504ee332114568b8c5942be8\&quot; \&quot;-m\&quot; \&quot;Initial commit\&quot;] \&quot;test-dir\&quot; \&quot;.idiot\&quot;)&quot;, :offset 50, :ns &quot;commit&quot;} {:command &quot;(ns a-namespace\n  (:require [ring.adapter.jetty :refer [run-jetty]]))\n\n(defn handler [request]\n  {:status 200  ; meaning \&quot;OK\&quot;\n   :headers {\&quot;Content-Type\&quot; \&quot;text/plain\&quot;}  ; instead of e.g. \&quot;text/html\&quot;\n   :body \&quot;Hello, world.\\n\&quot;})  ; the payload\n\n(defn start-server []\n  (run-jetty handler {:port 3000}))\n\n(start-server)&quot;, :offset 317, :ns &quot;user&quot;} {:command &quot;(println (format \&quot;Started server on port %s\&quot; 300))&quot;, :offset 48, :ns &quot;user&quot;} {:command &quot;(-&gt;&gt; (str \&quot;test-dir/.idiot\&quot; \&quot;/refs/heads\&quot;)\n     io/file\n     .listFiles\n     (sort-by #(.getName %))\n     (map #(.getName %)))&quot;, :offset 126, :ns &quot;user&quot;} {:command &quot;{:head (str \&quot;hello\&quot; \&quot;world\&quot;)}&quot;, :offset 26, :ns &quot;user&quot;} {:command &quot;(ns explore\n  (:require [file-io :as fio]\n            [ring.adapter.jetty :refer [run-jetty]]\n            [hiccup.page :refer [html5]]\n            [clojure.java.io :as io]))&quot;, :offset 173, :ns &quot;explore&quot;} {:command &quot;(defn get-branches-html\n  [dir db]\n  (let [branches (-&gt;&gt; (str dir db \&quot;/refs/heads\&quot;)\n                      io/file\n                      .listFiles\n                      (sort-by #(.getName %))\n                      (map #(.getName %)))\n        add-branch (fn [vector val] (conj vector [:p val]))]\n    (reduce add-branch [] branches)))&quot;, :offset 334, :ns &quot;explore&quot;} {:command &quot;(get-branches-html \&quot;test-dir/\&quot; \&quot;.idiot\&quot;)&quot;, :offset 20, :ns &quot;explore&quot;} {:command &quot;(html5 [:head [:title \&quot;Branches\&quot;]] [:body (get-branches-html \&quot;test-dir/\&quot; \&quot;.idiot\&quot;)])&quot;, :offset 80, :ns &quot;explore&quot;} {:command &quot;(html5 [:head [:title \&quot;Branches\&quot;]] [:body [:p \&quot;master\&quot;]])&quot;, :offset 53, :ns &quot;explore&quot;} {:command &quot;(html5 [:head [:title \&quot;Branches\&quot;]] [:body [[:p \&quot;master\&quot;]]])&quot;, :offset 56, :ns &quot;explore&quot;} {:command &quot;(html5 [:head [:title \&quot;Branches\&quot;]] [:body [:p \&quot;master\&quot;] [:p \&quot;another\&quot;]])&quot;, :offset 68, :ns &quot;explore&quot;} {:command &quot;(defn get-branches-html\n  [dir db]\n  (let [branches (-&gt;&gt; (str dir db \&quot;/refs/heads\&quot;)\n                      io/file\n                      .listFiles\n                      (sort-by #(.getName %))\n                      (map #(.getName %)))\n        add-branch (fn [vector val] (conj vector [:p val]))]\n    (reduce add-branch [:body ] branches)))&quot;, :offset 340, :ns &quot;explore&quot;} {:command &quot;(html5 [:head [:title \&quot;Branches\&quot;]] (get-branches-html \&quot;test-dir/\&quot; \&quot;.idiot\&quot;))&quot;, :offset 73, :ns &quot;explore&quot;} {:command &quot;(ns endpoints\n  (:require [hiccup.page :refer [html5]]\n            [clojure.java.io :as io]\n            [rev-parse :as rp]))&quot;, :offset 124, :ns &quot;user&quot;} {:command &quot;(-&gt;&gt; \&quot;test-dir/.idiot/HEAD\&quot;\n     rp/get-contents-no-nl)&quot;, :offset 54, :ns &quot;endpoints&quot;} {:command &quot;(-&gt; \&quot;test-dir/.idiot/HEAD\&quot;\n     rp/get-contents-no-nl\n     (str/split #\&quot;/\&quot;)\n     last)&quot;, :offset 65, :ns &quot;endpoints&quot;} {:command &quot;(str/split \&quot;/\&quot; #\&quot;/\&quot;)&quot;, :offset 18, :ns &quot;user&quot;} {:command &quot;(str/split \&quot;/branch/hello\&quot; #\&quot;/\&quot;)&quot;, :offset 25, :ns &quot;user&quot;} {:command &quot;(rest \&quot;/hello\&quot;)&quot;, :offset 13, :ns &quot;user&quot;} {:command &quot;(subs \&quot;/hello\&quot; 1)&quot;, :offset 16, :ns &quot;user&quot;} {:command &quot;(str/split \&quot;\&quot; #\&quot;/\&quot;)&quot;, :offset 12, :ns &quot;user&quot;} {:command &quot;(subs \&quot;/\&quot; 1)&quot;, :offset 11, :ns &quot;user&quot;} {:command &quot;(io/file \&quot;fdfa\&quot;)&quot;, :offset 14, :ns &quot;user&quot;} {:command &quot;(.exists (io/file \&quot;fdfa\&quot;))&quot;, :offset 25, :ns &quot;user&quot;} {:command &quot;(ns rev-list\n  (:require [file-io :as fio]\n            [rev-parse :as rp]\n            [cat-file :as cf]\n            [clojure.string :as str]\n            [clojure.java.io :as io]))&quot;, :offset 179, :ns &quot;user&quot;} {:command &quot;(defn object-address\n  [dir db address]\n  (str dir db \&quot;/objects/\&quot; (subs address 0 2) \&quot;/\&quot; (subs address 2)))&quot;, :offset 107, :ns &quot;rev-list&quot;} {:command &quot;(defn commit-contents\n  [dir db address]\n  (-&gt;&gt; address\n       (object-address dir db)\n       cf/get-content-bytes\n       (map char)\n       (apply str)))&quot;, :offset 153, :ns &quot;rev-list&quot;} {:command &quot;(defn get-commit-chain-addresses\n  \&quot;provides a list of commit chain objects\&quot;\n  [dir db head-address]\n  (loop [chain-list []\n         target-address head-address]\n    (let [contents (commit-contents dir db target-address)\n          second-line (-&gt; contents\n                          (str/split #\&quot;\\n\&quot;)\n                          second\n                          (str/split #\&quot; \&quot;))]\n      (if (-&gt; second-line first (= \&quot;parent\&quot;))\n        (recur (conj chain-list target-address) (second second-line))\n        (conj chain-list target-address)))))&quot;, :offset 538, :ns &quot;rev-list&quot;} {:command &quot;(defn ref-to-chain\n  [dir db get-function ref]\n  (-&gt;&gt; ref\n       (str dir db \&quot;/refs/heads/\&quot;)\n       slurp\n       butlast\n       (reduce str)\n       (get-function dir db)))&quot;, :offset 171, :ns &quot;rev-list&quot;} {:command &quot;(ref-to-chain \&quot;./\&quot; \&quot;.idiot\&quot; get-commit-chain-addresses \&quot;master\&quot;)&quot;, :offset 62, :ns &quot;rev-list&quot;} {:command &quot;(ref-to-chain \&quot;test-dir/\&quot; \&quot;.idiot\&quot; get-commit-chain-addresses \&quot;master\&quot;)&quot;, :offset 24, :ns &quot;rev-list&quot;} {:command &quot;(ns endpoints\n  (:require [hiccup.page :refer [html5]]\n            [clojure.java.io :as io]\n            [rev-parse :as rp]\n            [clojure.string :as str]\n            [rev-list :as rl]))&quot;, :offset 191, :ns &quot;rev-list&quot;} {:command &quot;(def main-body {:status 200 :headers {\&quot;Content-Type\&quot; \&quot;text/html\&quot;}})&quot;, :offset 67, :ns &quot;endpoints&quot;} {:command &quot;(def error-404 {:status 404})&quot;, :offset 29, :ns &quot;endpoints&quot;} {:command &quot;(defn add-body [html]\n  (assoc main-body :body html))&quot;, :offset 53, :ns &quot;endpoints&quot;} {:command &quot;(defn branch-html\n  [branch dir db]\n  (let [path (str dir db \&quot;/refs/heads/\&quot; branch)]\n    (if (.exists (io/file path))\n      (-&gt;&gt; branch\n           (rl/ref-to-chain dir db log/get-commit-chain-log)\n           (map (fn [tuple] (log/format-oneline-output (first tuple) (second tuple))))\n           )\n      error-404))\n  )&quot;, :offset 318, :ns &quot;endpoints&quot;} {:command &quot;(ns endpoints\n  (:require [hiccup.page :refer [html5]]\n            [clojure.java.io :as io]\n            [rev-parse :as rp]\n            [clojure.string :as str]\n            [rev-list :as rl]\n            [log :as lg]))&quot;, :offset 216, :ns &quot;endpoints&quot;} {:command &quot;(defn branch-html\n  [branch dir db]\n  (let [path (str dir db \&quot;/refs/heads/\&quot; branch)]\n    (if (.exists (io/file path))\n      (-&gt;&gt; branch\n           (rl/ref-to-chain dir db log/get-commit-chain-log)\n           (map (fn [tuple] (lg/format-oneline-output (first tuple) (second tuple))))\n           )\n      error-404))\n  )&quot;, :offset 317, :ns &quot;endpoints&quot;} {:command &quot;(defn branch-html\n  [branch dir db]\n  (let [path (str dir db \&quot;/refs/heads/\&quot; branch)]\n    (if (.exists (io/file path))\n      (-&gt;&gt; branch\n           (rl/ref-to-chain dir db log/get-commit-chain-log)\n           (map (fn [tuple] (lg/format-oneline-output (first tuple) (second tuple))))\n           (map #(subs % 0 (- (count %) 2))))\n      error-404))\n  )&quot;, :offset 350, :ns &quot;endpoints&quot;} {:command &quot;(defn branch-html\n  [branch dir db]\n  (let [path (str dir db \&quot;/refs/heads/\&quot; branch)]\n    (if (.exists (io/file path))\n      (-&gt;&gt; branch\n           (rl/ref-to-chain dir db log/get-commit-chain-log)\n           (map (fn [tuple] (lg/format-oneline-output (first tuple) (second tuple))))\n           (map #(subs % 0 (- (count %) 1))))\n      error-404))\n  )&quot;, :offset 350, :ns &quot;endpoints&quot;} {:command &quot;(defn branch-html\n  [branch dir db]\n  (let [path (str dir db \&quot;/refs/heads/\&quot; branch)]\n    (if (.exists (io/file path))\n      (-&gt;&gt; branch\n           (rl/ref-to-chain dir db log/get-commit-chain-log)\n           (map (fn [tuple] (lg/format-oneline-output (first tuple) (second tuple))))\n           (map #(subs % 0 (- (count %) 1)))\n           (map #([:li [:a {:href (str \&quot;/branches/\&quot; (subs % 0 7))} (subs % 0 7)] (subs % 7)])))\n      error-404))\n  )&quot;, :offset 445, :ns &quot;endpoints&quot;} {:command &quot;(defn branch-html\n  [branch dir db]\n  (let [path (str dir db \&quot;/refs/heads/\&quot; branch)]\n    (if (.exists (io/file path))\n      (-&gt;&gt; branch\n           (rl/ref-to-chain dir db log/get-commit-chain-log)\n           (map (fn [tuple] (lg/format-oneline-output (first tuple) (second tuple))))\n           (map #(subs % 0 (- (count %) 1)))\n           (map #(vec [:li [:a {:href (str \&quot;/branches/\&quot; (subs % 0 7))} (subs % 0 7)] (subs % 7)])))\n      error-404))\n  )&quot;, :offset 449, :ns &quot;endpoints&quot;} {:command &quot;(defn branch-html\n  [branch dir db]\n  (let [path (str dir db \&quot;/refs/heads/\&quot; branch)]\n    (if (.exists (io/file path))\n      (-&gt;&gt; branch\n           (rl/ref-to-chain dir db log/get-commit-chain-log)\n           (map (fn [tuple] (lg/format-oneline-output (first tuple) (second tuple))))\n           (map #(subs % 0 (- (count %) 1)))\n           (map #(vec [:li [:a {:href (str \&quot;/branches/\&quot; (subs % 0 7))} (subs % 0 7)] (subs % 7)]))\n           (reduce (fn [vec val] (conj vec val)) [:ul {:class \&quot;commit-list\&quot;}])\n           #(html5 [:head [:title branch]] [:body %])\n           add-body)\n      error-404)))&quot;, :offset 599, :ns &quot;endpoints&quot;} {:command &quot;(defn branch-html\n  [branch dir db]\n  (let [path (str dir db \&quot;/refs/heads/\&quot; branch)]\n    (if (.exists (io/file path))\n      (-&gt;&gt; branch\n           (rl/ref-to-chain dir db log/get-commit-chain-log)\n           (map (fn [tuple] (lg/format-oneline-output (first tuple) (second tuple))))\n           (map #(subs % 0 (- (count %) 1)))\n           (map #(vec [:li [:a {:href (str \&quot;/branches/\&quot; (subs % 0 7))} (subs % 0 7)] (subs % 7)]))\n           (reduce (fn [vec val] (conj vec val)) [:ul {:class \&quot;commit-list\&quot;}])\n           ;#(html5 [:head [:title branch]] [:body %])\n           ;   add-body\n           )\n      error-404)))&quot;, :offset 616, :ns &quot;endpoints&quot;} {:command &quot;(defn branch-html\n  [branch dir db]\n  (let [path (str dir db \&quot;/refs/heads/\&quot; branch)]\n    (if (.exists (io/file path))\n      (-&gt;&gt; branch\n           (rl/ref-to-chain dir db log/get-commit-chain-log)\n           (map (fn [tuple] (lg/format-oneline-output (first tuple) (second tuple))))\n           (map #(subs % 0 (- (count %) 1)))\n           (map #(vec [:li [:a {:href (str \&quot;/branches/\&quot; (subs % 0 7))} (subs % 0 7)] (subs % 7)]))\n           (reduce (fn [vec val] (conj vec val)) [:ul {:class \&quot;commit-list\&quot;}])\n           #(html5 [:head [:title branch]] [:body %])\n           ;   add-body\n           )\n      error-404)))&quot;, :offset 615, :ns &quot;endpoints&quot;} {:command &quot;(defn branch-html\n  [branch dir db]\n  (let [path (str dir db \&quot;/refs/heads/\&quot; branch)]\n    (if (.exists (io/file path))\n      (-&gt;&gt; branch\n           (rl/ref-to-chain dir db log/get-commit-chain-log)\n           (map (fn [tuple] (lg/format-oneline-output (first tuple) (second tuple))))\n           (map #(subs % 0 (- (count %) 1)))\n           (map #(vec [:li [:a {:href (str \&quot;/branches/\&quot; (subs % 0 7))} (subs % 0 7)] (subs % 7)]))\n           (reduce (fn [vec val] (conj vec val)) [:ul {:class \&quot;commit-list\&quot;}])\n           (html5 [:head [:title branch]] [:body %])\n           ;   add-body\n           )\n      error-404)))&quot;, :offset 614, :ns &quot;endpoints&quot;} {:command &quot;(defn branch-html\n  [branch dir db]\n  (let [path (str dir db \&quot;/refs/heads/\&quot; branch)\n        to-html #(html5 [:head [:title branch]] [:body %])]\n    (if (.exists (io/file path))\n      (-&gt;&gt; branch\n           (rl/ref-to-chain dir db log/get-commit-chain-log)\n           (map (fn [tuple] (lg/format-oneline-output (first tuple) (second tuple))))\n           (map #(subs % 0 (- (count %) 1)))\n           (map #(vec [:li [:a {:href (str \&quot;/branches/\&quot; (subs % 0 7))} (subs % 0 7)] (subs % 7)]))\n           (reduce (fn [vec val] (conj vec val)) [:ul {:class \&quot;commit-list\&quot;}])\n           to-html\n           ;   add-body\n           )\n      error-404)))&quot;, :offset 639, :ns &quot;endpoints&quot;} {:command &quot;(defn branch-html\n  [branch dir db]\n  (let [path (str dir db \&quot;/refs/heads/\&quot; branch)\n        to-html #(html5 [:head [:title branch]] [:body %])]\n    (if (.exists (io/file path))\n      (-&gt;&gt; branch\n           (rl/ref-to-chain dir db log/get-commit-chain-log)\n           (map (fn [tuple] (lg/format-oneline-output (first tuple) (second tuple))))\n           (map #(subs % 0 (- (count %) 1)))\n           (map #(vec [:li [:a {:href (str \&quot;/branches/\&quot; (subs % 0 7))} (subs % 0 7)] (subs % 7)]))\n           (reduce (fn [vec val] (conj vec val)) [:ul {:class \&quot;commit-list\&quot;}])\n           to-html\n           add-body\n           )\n      error-404)))&quot;, :offset 635, :ns &quot;endpoints&quot;} {:command &quot;(branch-html \&quot;master\&quot; \&quot;test-dir/\&quot; \&quot;.idiot\&quot;)&quot;, :offset 41, :ns &quot;endpoints&quot;} {:command &quot;(map count [])&quot;, :offset 13, :ns &quot;endpoints&quot;} {:command &quot;(ns get_address\n  (:require [clojure.java.io :as io]))&quot;, :offset 54, :ns &quot;get_address&quot;} {:command &quot;(defn search-address\n  [addr dir db]\n  (try (let [files (-&gt;&gt; (subs addr 0 2)\n                        (str dir db \&quot;/objects/\&quot;)\n                        io/file\n                        .listFiles\n                        (map #(.getName %)))\n             initial-chars (subs addr 2)\n             chars-len (count initial-chars)\n             matching-files (filter #(= initial-chars (subs % 0 chars-len)) files)\n             mapped-files (map #(str (subs addr 0 2) %))]\n         (if (= 0 (count matching-files))\n           [0 addr]\n           [(count matching-files) mapped-files]))\n       (catch Exception e e [0, 0])))&quot;, :offset 615, :ns &quot;get_address&quot;} {:command &quot;(search-address \&quot;2a17\&quot; \&quot;test-dir/\&quot; \&quot;.idiot\&quot;)&quot;, :offset 42, :ns &quot;get_address&quot;} {:command &quot;(second (search-address \&quot;2a17\&quot; \&quot;test-dir/\&quot; \&quot;.idiot\&quot;))&quot;, :offset 52, :ns &quot;get_address&quot;} {:command &quot;(defn search-address\n  [addr dir db]\n  (try (let [files (-&gt;&gt; (subs addr 0 2)\n                        (str dir db \&quot;/objects/\&quot;)\n                        io/file\n                        .listFiles\n                        (map #(.getName %)))\n             initial-chars (subs addr 2)\n             chars-len (count initial-chars)\n             matching-files (filter #(= initial-chars (subs % 0 chars-len)) files)\n             mapped-files (map #(str (subs addr 0 2) %))]\n         (if (= 0 (count matching-files))\n           [0 addr]\n           [(count matching-files) (vec mapped-files)]))\n       (catch Exception e e [0, 0])))&quot;, :offset 621, :ns &quot;get_address&quot;} {:command &quot;(defn search-address\n  [addr dir db]\n  (try (let [files (-&gt;&gt; (subs addr 0 2)\n                        (str dir db \&quot;/objects/\&quot;)\n                        io/file\n                        .listFiles\n                        (map #(.getName %)))\n             initial-chars (subs addr 2)\n             chars-len (count initial-chars)\n             matching-files (filter #(= initial-chars (subs % 0 chars-len)) files)\n             mapped-files (map #(str (subs addr 0 2) matching-files))]\n         (if (= 0 (count matching-files))\n           [0 addr]\n           [(count matching-files) mapped-files]))\n       (catch Exception e e [0, 0])))&quot;, :offset 628, :ns &quot;get_address&quot;} {:command &quot;(defn search-address\n  [addr dir db]\n  (try (let [files (-&gt;&gt; (subs addr 0 2)\n                        (str dir db \&quot;/objects/\&quot;)\n                        io/file\n                        .listFiles\n                        (map #(.getName %)))\n             initial-chars (subs addr 2)\n             chars-len (count initial-chars)\n             matching-files (filter #(= initial-chars (subs % 0 chars-len)) files)\n             mapped-files (map #(str (subs addr 0 2) %) matching-files)]\n         (if (= 0 (count matching-files))\n           [0 addr]\n           [(count matching-files) mapped-files]))\n       (catch Exception e e [0, 0])))&quot;, :offset 630, :ns &quot;get_address&quot;} {:command &quot;(first (second (search-address \&quot;2a17\&quot; \&quot;test-dir/\&quot; \&quot;.idiot\&quot;)))&quot;, :offset 60, :ns &quot;get_address&quot;} {:command &quot;(def target-info (search-address \&quot;ef32\&quot; \&quot;test-dir/\&quot; \&quot;.idiot\&quot;))&quot;, :offset 59, :ns &quot;get_address&quot;} {:command &quot;(map #([% (ct/get-object-type % \&quot;test-dir/\&quot; \&quot;.idiot\&quot;)]) target-info)&quot;, :offset 51, :ns &quot;get_address&quot;} {:command &quot;(map #([(first %) (ct/get-object-type (second %) \&quot;test-dir/\&quot; \&quot;.idiot\&quot;)]) target-info)&quot;, :offset 47, :ns &quot;get_address&quot;} {:command &quot;target-info&quot;, :offset 11, :ns &quot;get_address&quot;} {:command &quot;(defn get-object-type\n  [address dir db]\n  (try (-&gt;&gt; (file-path address dir db)\n            fio/unzip\n            (fio/split-at-byte (byte 0x20))\n            first\n            fio/bytes-&gt;str)\n       (catch Exception e e nil)))&quot;, :offset 226, :ns &quot;commit-tree&quot;} {:command &quot;(map #([% (ct/get-object-type % \&quot;test-dir/\&quot; \&quot;.idiot\&quot;)]) (second  target-info))&quot;, :offset 51, :ns &quot;commit-tree&quot;} {:command &quot;(ns endpoints\n  (:require [hiccup.page :refer [html5]]\n            [clojure.java.io :as io]\n            [rev-parse :as rp]\n            [clojure.string :as str]\n            [rev-list :as rl]\n            [log :as lg]\n            [get_address :as ga]\n            [commit-tree :as ct]))&quot;, :offset 282, :ns &quot;commit-tree&quot;} {:command &quot;(defn redirect\n  [obj-type address]\n  {:status 302 :headers {\&quot;Location\&quot; (str \&quot;/\&quot; obj-type \&quot;/\&quot; address)}})&quot;, :offset 105, :ns &quot;endpoints&quot;} {:command &quot;(defn commit-html\n  [address dir db]\n  (let [target-addresses (ga/search-address address dir db)\n        count-addresses (first target-addresses)\n        full-address (first (second target-addresses))\n        file-type (ct/get-object-type full-address dir db)]\n    (cond\n      (or (&lt; (count address) 4) (= 0 count-addresses)) error-404\n      (&lt; 1 count-addresses) (duplicate-html target-addresses dir db)\n      :else (if (not (= file-type \&quot;commit\&quot;))\n              (redirect file-type full-address)\n              (add-body (html5 [:body [:div full-address]]))))))&quot;, :offset 562, :ns &quot;endpoints&quot;} {:command &quot;([\&quot;3\&quot;])&quot;, :offset 4, :ns &quot;endpoints&quot;} {:command &quot;#[3]&quot;, :offset 3, :ns &quot;endpoints&quot;} {:command &quot;(vec [1 2])&quot;, :offset 9, :ns &quot;endpoints&quot;} {:command &quot;(def test #(vec [% 3]))&quot;, :offset 20, :ns &quot;endpoints&quot;} {:command &quot;(def test-vec #(vec [% 3]))&quot;, :offset 13, :ns &quot;endpoints&quot;} {:command &quot;(test-vec 2)&quot;, :offset 11, :ns &quot;endpoints&quot;} {:command &quot;(defn duplicate-html\n  [target-info dir db]\n  (let [response #({:status 300\n                    :body (html5 [:head [:title \&quot;Multiple Choices\&quot;]]\n                                 [:body\n                                  [:p \&quot;The given address prefix is ambiguous. Please disambiguate your intent by choosing from the following options.\&quot;]\n                                  [:ul {:class \&quot;disambiguation-list\&quot;} %]])})\n        target-type (map #(vec [% (ct/get-object-type % dir db)]) (second target-info))\n        target-html (reduce (fn [html [addr type]] (conj html [:li [:a {:href (str \&quot;/\&quot; type \&quot;/\&quot; addr)} (str addr \&quot;(\&quot; type \&quot;)\&quot;)]])) target-type)]\n    (response target-html)))&quot;, :offset 675, :ns &quot;endpoints&quot;} {:command &quot;(commit-html \&quot;ef32\&quot; \&quot;test-dir/\&quot; \&quot;.idiot\&quot;)&quot;, :offset 39, :ns &quot;endpoints&quot;} {:command &quot;(def target-info (get_address/search-address \&quot;ef32\&quot; \&quot;test-dir/\&quot; \&quot;.idiot\&quot;))&quot;, :offset 71, :ns &quot;endpoints&quot;} {:command &quot;(target-info)&quot;, :offset 12, :ns &quot;endpoints&quot;} {:command &quot;(print target-info)&quot;, :offset 18, :ns &quot;endpoints&quot;} {:command &quot;(map #(vec [1 %]) (second target-info))&quot;, :offset 37, :ns &quot;endpoints&quot;} {:command &quot;(map #(vec [% %]) (second target-info))&quot;, :offset 15, :ns &quot;endpoints&quot;} {:command &quot;(map #(vec [% (ct/get-object-type % \&quot;test-dir/\&quot; \&quot;.idiot\&quot;)]) (second target-info))&quot;, :offset 55, :ns &quot;endpoints&quot;} {:command &quot;(def response #({:status 300\n                 :body (html5 [:head [:title \&quot;Multiple Choices\&quot;]]\n                              [:body\n                               [:p \&quot;The given address prefix is ambiguous. Please disambiguate your intent by choosing from the following options.\&quot;]\n                               [:ul {:class \&quot;disambiguation-list\&quot;} %]])}))&quot;, :offset 166, :ns &quot;endpoints&quot;} {:command &quot;(response)&quot;, :offset 9, :ns &quot;endpoints&quot;} {:command &quot;#({:status 300\n   :body (html5 [:head [:title \&quot;Multiple Choices\&quot;]]\n                [:body [:p \&quot;The given address prefix is ambiguous. Please disambiguate your intent by choosing from the following options.\&quot;] [:ul {:class \&quot;disambiguation-list\&quot;} %]])})&quot;, :offset 250, :ns &quot;endpoints&quot;} {:command &quot;(def response #({:status 300\n                 :body (html5 [:head [:title \&quot;Multiple Choices\&quot;]]\n                              [:body [:p \&quot;The given address prefix is ambiguous. Please disambiguate your intent by choosing from the following options.\&quot;] [:ul {:class \&quot;disambiguation-list\&quot;} %]])}))&quot;, :offset 292, :ns &quot;endpoints&quot;} {:command &quot;(def response #(hash-map {:status 300\n                 :body (html5 [:head [:title \&quot;Multiple Choices\&quot;]]\n                              [:body [:p \&quot;The given address prefix is ambiguous. Please disambiguate your intent by choosing from the following options.\&quot;] [:ul {:class \&quot;disambiguation-list\&quot;} %]])}))&quot;, :offset 25, :ns &quot;endpoints&quot;} {:command &quot;(response \&quot;f\&quot;)&quot;, :offset 12, :ns &quot;endpoints&quot;}], :remote []}}</component>
  <component name="RunManager">
    <configuration name="REPL" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="Comp590-Assignment3" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="fixLineNumbers" value="false" />
      <module name="" />
      <method v="2" />
    </configuration>
  </component>
  <component name="ServiceViewManager">
    <option name="viewStates">
      <list>
        <serviceView>
          <treeState>
            <expand />
            <select />
          </treeState>
        </serviceView>
      </list>
    </option>
  </component>
  <component name="WindowStateProjectService">
    <state x="223" y="68" key="#com.intellij.execution.impl.EditConfigurationsDialog" timestamp="1583204238787">
      <screen x="0" y="0" width="1536" height="824" />
    </state>
    <state x="223" y="68" key="#com.intellij.execution.impl.EditConfigurationsDialog/0.0.1536.824@0.0.1536.824" timestamp="1583204238787" />
    <state x="434" y="216" key="#com.intellij.fileTypes.FileTypeChooser" timestamp="1587265312429">
      <screen x="0" y="0" width="1536" height="824" />
    </state>
    <state x="434" y="216" key="#com.intellij.fileTypes.FileTypeChooser/0.0.1536.824@0.0.1536.824" timestamp="1587265312429" />
    <state x="465" y="237" key="com.intellij.ide.util.TipDialog" timestamp="1587313950408">
      <screen x="0" y="0" width="1536" height="824" />
    </state>
    <state x="465" y="237" key="com.intellij.ide.util.TipDialog/0.0.1536.824@0.0.1536.824" timestamp="1587313950408" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/rev_parse.clj</url>
          <line>11</line>
          <option name="timeStamp" value="1" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/explore.clj</url>
          <line>38</line>
          <option name="timeStamp" value="2" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/endpoints.clj</url>
          <option name="timeStamp" value="3" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
</project>